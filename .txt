document.addEventListener("DOMContentLoaded", async () => {
  const goBackLink = document.getElementById("goBackLink");

  goBackLink.addEventListener("click", (event) => {
    event.preventDefault();
    window.history.back();
  });

  const submitButton = document.getElementById("submitQuiz");
  submitButton.classList.add("locked"); // Initially lock the button
  submitButton.style.color = "#f5f6fa";
  submitButton.style.backgroundColor = "#f8991d";

  try {
    const urlParams = new URLSearchParams(window.location.search);
    const courseId = urlParams.get("courseid");
    const moduleId = urlParams.get("moduleid");
    const quizId = urlParams.get("quizid");

    // const userDataString = localStorage.getItem("userData");
    // Retrieve userToken from cookies
    const userToken = getCookie("userToken");

    // Retrieve userData from local storage
    const userData = localStorage.getItem("userData");

    // Parse the userDataString to get the userData object
    const userDataString = JSON.parse(userData);

    // Now you can use the userData object
    console.log(userDataString.name); // For example, accessing the user's name

    console.log("userData:", userDataString);
    console.log("userToken:", userToken);
    // console.log("Main Data:", mainData);

    if (userDataString && userToken) {
      const profileNameElement = document.querySelector(".user_name");
      const studentIdElement = document.querySelector(".student_id");
      const initialsElement = document.querySelector(".initials span");

      profileNameElement.textContent = userDataString.name;
      studentIdElement.textContent = `Student ID: ${userDataString.id}`;

      if (userDataString.name) {
        const firstName = userDataString.name.split(" ")[0];
        const firstInitial = firstName.charAt(0).toUpperCase();
        initialsElement.textContent = firstInitial;
      }

      console.log("Course ID", courseId);
      console.log("Module ID", moduleId);
      console.log("Quiz ID", quizId);

      // Retrieve study material data from local storage
      const studyMaterialsDataLocalStorage = JSON.parse(
        localStorage.getItem("studyMaterialsData")
      );
      console.log(
        "Study Materials Data (LocalStorage):",
        studyMaterialsDataLocalStorage
      );

      if (
        studyMaterialsDataLocalStorage &&
        studyMaterialsDataLocalStorage.finalResult
      ) {
        const lecture = studyMaterialsDataLocalStorage.finalResult[0].lecture;

        if (lecture.attachments && lecture.attachments[0].kind === "quiz") {
          const quizData = lecture.attachments[0].quiz;
          const quizQuestions = quizData.questions;

          const quizContainer = document.getElementById("quiz_container");
          const quizResult = document.getElementById("quiz_results");

          quizQuestions.forEach((question, index) => {
            const questionElement = document.createElement("div");
            questionElement.classList.add("quiz_main_question");
            questionElement.innerHTML = `<h4>${index + 1}: ${
              question.question
            }</h4>`;

            const answersElement = document.createElement("ul");
            answersElement.classList.add("answers");

            question.answers.forEach((answer, answerIndex) => {
              const answerItem = document.createElement("li");

              const radioInput = document.createElement("input");
              radioInput.type = "radio";
              radioInput.name = `question_${index}`;
              radioInput.value = answerIndex; // Store the index of the selected answer
              radioInput.addEventListener("change", () => {
                // Store the user's answer selection in localStorage
                storeUserAnswer(quizId, index, answerIndex);
              });

              // Retrieve user's answer selection from localStorage
              const storedAnswers = getUserAnswers(quizId);
              if (storedAnswers && storedAnswers[index] === answerIndex) {
                radioInput.checked = true; // Set the radio button as selected
              }

              const answerLabel = document.createElement("label");
              answerLabel.textContent = answer;

              // Check if all questions have been answered
              const allQuestionsAnswered = quizQuestions.every(
                (question, idx) => {
                  const stored = getUserAnswers(quizId);
                  return stored && stored[idx] !== undefined;
                }
              );

              // Enable or disable the submit button based on answers
              if (allQuestionsAnswered) {
                submitButton.classList.remove("locked");
              } else {
                submitButton.classList.add("locked");
              }

              answerItem.appendChild(radioInput);
              answerItem.appendChild(answerLabel);
              answersElement.appendChild(answerItem);
            });

            questionElement.appendChild(answersElement);
            quizContainer.appendChild(questionElement);

            // Print correct answers to console
            console.log(
              `Correct Answer for Question ${
                index + 1
              }: ${question.correct_answers.join(", ")}`
            );

            const nextModule = document.getElementById("next_module");
            const tryAgain = document.getElementById("try_again");

            submitButton.addEventListener("click", () => {
              quizResult.classList.add("show");

              quizContainer.style.display = "none";

              const scoreElement = document.getElementById("score");
              const congratsText = document.getElementById("congrats");
              const failedText = document.getElementById("failed");

              nextModule.style.display = "none";
              tryAgain.style.display = "none";
              congratsText.style.display = "none";
              failedText.style.display = "none";

              let userScore = 0;
              const totalQuestions = quizQuestions.length;

              quizQuestions.forEach((question, index) => {
                const storedAnswers = getUserAnswers(quizId);
                const userAnswerIndex = storedAnswers
                  ? storedAnswers[index]
                  : undefined;

                const correctAnswerIndices = question.answers.reduce(
                  (indices, answer, answerIndex) => {
                    if (question.correct_answers.includes(answer)) {
                      indices.push(answerIndex);
                    }
                    return indices;
                  },
                  []
                );

                if (
                  userAnswerIndex !== undefined &&
                  correctAnswerIndices.includes(userAnswerIndex)
                ) {
                  userScore += 1;
                }
              });

              const percentageScore = (userScore / totalQuestions) * 100;

              if (percentageScore >= 70) {
                congratsText.style.display = "block";
                nextModule.style.display = "block";
              } else {
                tryAgain.style.display = "block";
                failedText.style.display = "block";
              }

              if (percentageScore < 70) {
                scoreElement.style.color = "red";
              }

              scoreElement.textContent = `${Math.floor(percentageScore)}%`;
            });

            tryAgain.addEventListener("click", (e) => {
              e.preventDefault();

              // Hide the results and show the quiz
              quizResult.classList.remove("show");
              quizContainer.style.display = "block";

              // Iterate through user selections and adjust styles
              question.answers.forEach((answer, answerIndex) => {
                const answerItem = answersElement.querySelector(
                  `li:nth-child(${answerIndex + 1})`
                );
                const storedAnswers = getUserAnswers(quizId);
                const userAnswerIndex = storedAnswers
                  ? storedAnswers[index]
                  : undefined;
                const answerLabel = answerItem.querySelector("label");

                if (userAnswerIndex === answerIndex) {
                  if (question.correct_answers.includes(answer)) {
                    answerLabel.classList.add("correct-answer");
                    answerLabel.classList.remove("incorrect-answer");
                  } else {
                    answerLabel.classList.add("incorrect-answer");
                    answerLabel.classList.remove("correct-answer");
                  }
                } else {
                  answerItem.classList.remove(
                    "correct-answer",
                    "incorrect-answer"
                  );
                  answerLabel.classList.remove(
                    "correct-text",
                    "incorrect-text"
                  );
                }
              });
            });
          });
        }
      }
    } else {
      // Handle the case when user data or token is not available
    }
  } catch (error) {
    console.error("Error:", error);
  }
});

function getCookie(cookieName) {
  const cookies = document.cookie.split("; ");
  for (const cookie of cookies) {
    const [name, value] = cookie.split("=");
    if (name === cookieName) {
      return value;
    }
  }
  return null;
}

function storeUserAnswer(quizId, questionIndex, answerIndex) {
  const storageKey = `userAnswers_${quizId}`;
  let userAnswers = JSON.parse(localStorage.getItem(storageKey)) || {};

  userAnswers[questionIndex] = answerIndex;
  localStorage.setItem(storageKey, JSON.stringify(userAnswers));
}

function getUserAnswers(quizId) {
  const storageKey = `userAnswers_${quizId}`;
  return JSON.parse(localStorage.getItem(storageKey));
}

// Function to retrieve a cookie by name
function getCookie(name) {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(";").shift();
}

// Function to clear a specific cookie
function clearCookie(name) {
  document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
}

// Function to log out the user and clear cookies
function logoutUser() {
  clearCookie("userData");
  clearCookie("userToken");
  clearCookie("studyMaterialsData");
  clearCookie("studyMaterialsByModule");
  clearCookie("apiData");

  sessionStorage.removeItem("userData");
  sessionStorage.removeItem("userToken");

  window.location.href = "./index.html"; // Redirect to the login page
}
