          // Function to show certificate cards content
          const showCertificateCards = () => {
            const courseCardsContainer =
              document.getElementById("course_cards");
            const certificateCardsContainer =
              document.getElementById("certificate_cards");
            const certificateModal =
              document.getElementById("certificate_modal");
            const accordion = document.querySelector(".accordion");

            accordion.style.display = "none";

            // Clear any existing cards
            certificateCardsContainer.innerHTML = "";

            // Loop through enrolled courses and create certificate cards
            result.enrolledcourses.forEach((course) => {
              const card = document.createElement("div");
              card.classList.add("certificate_card");

              // Create and set course image
              const courseImage = document.createElement("img");
              courseImage.src = course.course_image_url;
              card.appendChild(courseImage);

              // Create and set course name
              const courseName = document.createElement("h4");
              courseName.textContent = course.course_name;
              courseName.classList.add("certificate_card_course_title");
              // card.appendChild(courseName);

              // Create and set text for successfully completed
              const completedText = document.createElement("p");
              completedText.textContent = "Successfully Completed";
              // card.appendChild(completedText);

              const course_cert_details = document.createElement("div");
              course_cert_details.appendChild(courseName);
              course_cert_details.appendChild(completedText);

              // Create button
              const viewButton = document.createElement("button");
              viewButton.classList.add("view");
              viewButton.textContent = "View";
              viewButton.addEventListener("click", () => {
                // Show certificate modal with course details
                showCertificateModal(course);
              });

              const course_cert_details_container =
                document.createElement("div");
              course_cert_details_container.classList.add(
                "course_cert_details_container"
              );
              course_cert_details_container.appendChild(course_cert_details);
              course_cert_details_container.appendChild(viewButton);
              card.appendChild(course_cert_details_container);

              // Append card to container
              certificateCardsContainer.appendChild(card);
            });

            certificateCardsContainer.style.display = "block";
            certificateCardsContainer.classList.add(
              "course_certificate_container"
            );
            certificateModal.style.display = "none";
            courseCardsContainer.style.display = "none";

            // Add active class to "Certificates" button
            const certificatesButton = document.getElementById(
              "certificates_button"
            );
            certificatesButton.classList.add("active");

            // Remove active class from "My Courses" button
            const myCoursesButton =
              document.getElementById("my_courses_button");
            myCoursesButton.classList.remove("active");
          };


////////video\\\\\\\\\
else if (attachment.kind === "video") {
                  label = "Video";
                  icon = "<i class='bx bx-play'></i>";

                  const attachmentStateKey = `${moduleKey}_${attachment.id}`;
                  const savedAttachmentState =
                    localStorage.getItem(attachmentStateKey);

                  if (savedAttachmentState === "opened") {
                    icon = "<i class='bx bx-check-circle'></i>";
                  }

                  attachmentInfo.addEventListener("click", async () => {
                    pdfContainer.style.display = "none";
                    videoPlayer.style.display = "block";

                    // Remove active class from the previously active milestone
                    if (activeMilestone) {
                      activeMilestone.classList.remove("module_active");
                    }

                    // Add active class to the clicked milestone
                    milestoneElement.classList.add("module_active");

                    // Update the active milestone
                    activeMilestone = milestoneElement;

                    const videoUrl = attachment.url;

                    const sourceMp4 = videoPlayer.querySelector(
                      "source[type='video/mp4']"
                    );
                    const sourceWebm = videoPlayer.querySelector(
                      "source[type='video/webm']"
                    );
                    sourceMp4.setAttribute("src", videoUrl);
                    sourceWebm.setAttribute("src", videoUrl);

                    videoPlayer.load();

                    // Change the icon to a checkmark
                    attachmentInfo.innerHTML = `
                      <i class='bx bx-check-circle'></i>
                      <div>
                        <span><b>${label}: ${capitalizedLectureName}</b></span>
                        <p>Module Content: ${lecturePosition}</p>
                      </div>
                    `;

                    // Automatically start playing the video if there's saved progress
                    const savedProgressKey = `video_progress_${courseId}_${moduleId}_${lecture.id}_${attachment.id}_${index}`;
                    const savedProgress =
                      localStorage.getItem(savedProgressKey);

                    if (savedProgress) {
                      videoPlayer.currentTime = parseFloat(savedProgress);
                      videoPlayer.play(); // Automatically start playing
                    }

                    videoPlayer.addEventListener("timeupdate", () => {
                      localStorage.setItem(
                        savedProgressKey,
                        videoPlayer.currentTime
                      );
                    });

                    if (!savedAttachmentState) {
                      localStorage.setItem(attachmentStateKey, "opened");
                      clickedMilestones++;

                      const progressPercentage =
                        (clickedMilestones / totalMilestones) * 100;

                      await updateProgressToAPI(
                        progressPercentage,
                        moduleId,
                        teachable_course_id,
                        targetCourse.enrollment_source,
                        userToken
                      );
                    }
                  });

                  if (
                    savedAttachmentState === "opened" &&
                    videoPlayer.currentTime > 0
                  ) {
                    videoPlayer.load();
                    videoPlayer.play();
                  } else {
                    if (savedAttachmentState === "opened") {
                      videoPlayer.load();
                    }
                  }
                }